package com.model.channel.ai;

import com.exception.GenericException;
import com.model.Task;
import com.model.channel.ChannelManager;
import com.model.datatype.BridgeConfigType;
import com.model.datatype.ShuntResistorLocType;
import com.model.datatype.TerminalConfigType;
import com.model.datatype.unit.CurrentUnitType;
import com.model.datatype.unit.TorqueUnitType;
import com.wrapper.NIDAQmxJWrapper;
import com.wrapper.NIDAQmxJWrapperException;

public class AIChannelManager extends ChannelManager {

	public AIChannelManager(Task task) {
		super(task);
	}

	public AIChannel createCurrentChannel(String physicalChannel,
			String nameToAssignToChannel, TerminalConfigType terminalConfig,
			double minVal, double maxVal, CurrentUnitType units,
			ShuntResistorLocType shuntResistorLoc, double extShuntResistorVal,
			String customScaleName) throws GenericException {

		try {
			NIDAQmxJWrapper.createAICurrentChan(getTask().getPointer(),
					physicalChannel, nameToAssignToChannel,
					terminalConfig.getCode(), minVal, maxVal, units.getCode(),
					shuntResistorLoc.getCode(), extShuntResistorVal,
					customScaleName);

			AICurrentChannel channel = new AICurrentChannel(getTask(),
					nameToAssignToChannel);

			return channel;

		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createCurrentRMSChannel(String physicalChannel,
			String nameToAssignToChannel, TerminalConfigType terminalConfig,
			double minVal, double maxVal, CurrentUnitType units,
			ShuntResistorLocType shuntResistorLoc, double extShuntResistorVal,
			String customScaleName) throws GenericException {

		try {
			NIDAQmxJWrapper.createAICurrentRMSChan(getTask().getPointer(),
					physicalChannel, nameToAssignToChannel,
					terminalConfig.getCode(), minVal, maxVal, units.getCode(),
					shuntResistorLoc.getCode(), extShuntResistorVal,
					customScaleName);

			AICurrentChannel channel = new AICurrentChannel(getTask(),
					nameToAssignToChannel);

			return channel;

		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createTorqueBridgePolynomialChannel(
			String physicalChannel, String nameToAssignToChannel,
			double minVal, double maxVal, TorqueUnitType units,
			BridgeConfigType bridgeConfig,
			ExcitationSourceType voltageExcitSource, double voltageExcitVal,
			double nominalBridgeResistance, double[] forwardCoeffs,
			double[] reverseCoeffs, int electricalUnits, int physicalUnits,
			String customScaleName) throws GenericException {

		try {
			NIDAQmxJWrapper.createAITorqueBridgePolynomialChan(getTask()
					.getPointer(), physicalChannel, nameToAssignToChannel,
					minVal, maxVal, units, bridgeConfig, voltageExcitSource,
					voltageExcitVal, nominalBridgeResistance, forwardCoeffs,
					reverseCoeffs, electricalUnits, physicalUnits,
					customScaleName);

			AITorqueChannel channel = new AITorqueChannel(getTask(),
					nameToAssignToChannel);
			getChannels().add(channel);

			return channel;
		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createAITorqueBridgeTableChannel(String physicalChannel,
			String nameToAssignToChannel, double minVal, double maxVal,
			int units, int bridgeConfig, int voltageExcitSource,
			double voltageExcitVal, double nominalBridgeResistance,
			double[] electricalVals, int electricalUnits,
			double[] physicalVals, int physicalUnits, String customScaleName)
			throws GenericException {

		try {
			NIDAQmxJWrapper.createAITorqueBridgeTableChan(getTask()
					.getPointer(), physicalChannel, nameToAssignToChannel,
					minVal, maxVal, units, bridgeConfig, voltageExcitSource,
					voltageExcitVal, nominalBridgeResistance, electricalVals,
					electricalUnits, physicalVals, physicalUnits,
					customScaleName);

			AITorqueChannel channel = new AITorqueChannel(getTask(),
					nameToAssignToChannel);
			getChannels().add(channel);

			return channel;
		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createAITorqueBridgeTwoPointLinChan(
			String physicalChannel, String nameToAssignToChannel,
			double minVal, double maxVal, int units, int bridgeConfig,
			int voltageExcitSource, double voltageExcitVal,
			double nominalBridgeResistance, double firstElectricalVal,
			double secondElectricalVal, int electricalUnits,
			double firstPhysicalVal, double secondPhysicalVal,
			int physicalUnits, String customScaleName) throws GenericException {

		try {
			NIDAQmxJWrapper.createAITorqueBridgeTwoPointLinChan(getTask()
					.getPointer(), physicalChannel, nameToAssignToChannel,
					minVal, maxVal, units, bridgeConfig, voltageExcitSource,
					voltageExcitVal, nominalBridgeResistance,
					firstElectricalVal, secondElectricalVal, electricalUnits,
					firstPhysicalVal, secondPhysicalVal, physicalUnits,
					customScaleName);

			AITorqueChannel channel = new AITorqueChannel(getTask(),
					nameToAssignToChannel);
			getChannels().add(channel);

			return channel;
		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createAIVelocityIEPEChan(String physicalChannel,
			String nameToAssignToChannel, int terminalConfig, double minVal,
			double maxVal, int units, double sensitivity, int sensitivityUnits,
			int currentExcitSource, double currentExcitVal,
			String customScaleName) throws GenericException {

		try {
			NIDAQmxJWrapper.createAIVelocityIEPEChan(getTask().getPointer(),
					physicalChannel, nameToAssignToChannel, terminalConfig,
					minVal, maxVal, units, sensitivity, sensitivityUnits,
					currentExcitSource, currentExcitVal, customScaleName);

			AIVelocityChannel channel = new AIVelocityChannel(getTask(),
					nameToAssignToChannel);
			getChannels().add(channel);

			return channel;
		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}

	public AIChannel createVoltageChannel(String physicalChannel,
			String nameToAssignToChannel, int terminalConfig, double minVal,
			double maxVal, int units, String customScaleName)
			throws GenericException {
		try {
			NIDAQmxJWrapper.createAIVoltageChan(getTask().getPointer(),
					physicalChannel, nameToAssignToChannel, terminalConfig,
					minVal, maxVal, units, customScaleName);

			AIVoltageChannel channel = new AIVoltageChannel(getTask(),
					nameToAssignToChannel);
			getChannels().add(channel);

			return channel;
		} catch (NIDAQmxJWrapperException e) {
			throw new GenericException(e);
		}
	}
}
